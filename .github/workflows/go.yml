# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
        cache: false

    - name: Build
      run: go build -o bin/ -v ./...

    - name: Test
      id: Test
      run: go test -v ./... -json > report.json

    - name: Coverage
      id: Coverage
      run: go test -coverprofile=cover.out ./hello-world/

# Doing the Debug
#  job1:
#    runs-on: ubuntu-latest
    # Map a step output to a job output
#    outputs:
#      output11: ${{ steps.step1.outputs.test }}
#      output12: ${{ steps.step2.outputs.test }}
#    steps:
#      - id: step1
#        run: echo "test=hello" >> "$GITHUB_OUTPUT"
#      - id: step2
#        run: echo "test=world" >> "$GITHUB_OUTPUT"
#  job2:
#    runs-on: ubuntu-latest
#    needs: job1
#    steps:
#      - env:
#          OUTPUT11: ${{needs.job1.outputs.output11}}
#          OUTPUT12: ${{needs.job1.outputs.output12}}
#        run: echo "$OUTPUT11 $OUTPUT12"
#  job3:
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - env:
#          OUTPUT1: ${{needs.build.outputs.t-output}}
#          OUTPUT2: ${{needs.build.outputs.c-output}}
#        run: echo "$OUTPUT1 $OUTPUT2"

  sonarcloud:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - uses: actions/setup-go@v2
    - run: go test -covermode=atomic -coverprofile=cover.out ./hello-world

    - uses: actions/setup-go@v2
    - run: go test -v ./... -json > report.json

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
#        TEST_REPORT: ${{needs.build.outputs.t-output}}
#        COVERAGE_REPORT: ${{needs.build.outputs.c-output}}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#EOF
